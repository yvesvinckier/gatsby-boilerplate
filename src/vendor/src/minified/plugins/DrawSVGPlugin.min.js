/*!
 * VERSION: 0.1.3
 * DATE: 2017-03-29
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2017, GreenSock. All rights reserved.
 * DrawSVGPlugin is a Club GreenSock membership benefit; You must have a valid membership to use
 * this code without violating the terms of use. Visit http://greensock.com/club/ to sign up or get more details.
 * This work is subject to the software agreement that was issued with your membership.
 *
 * @author: Jack Doyle, jack@greensock.com
 */
var _gsScope = typeof module !== 'undefined' && module.exports && typeof global !== 'undefined' ? global : this || window; (_gsScope._gsQueue || (_gsScope._gsQueue = [])).push(function() { 'use strict'; function a(a, b, c, d, e, f) { return c = (parseFloat(c) - parseFloat(a)) * e, d = (parseFloat(d) - parseFloat(b)) * f, Math.sqrt(c * c + d * d) } function b(a) { return typeof a !== 'string' && a.nodeType || (a = _gsScope.TweenLite.selector(a), a.length && (a = a[0])), a } function c(a, b, c) { var d, e, f = a.indexOf(' '); return f === -1 ? (d = void 0 !== c ? c + '' : a, e = a) : (d = a.substr(0, f), e = a.substr(f + 1)), d = d.indexOf('%') !== -1 ? parseFloat(d) / 100 * b : parseFloat(d), e = e.indexOf('%') !== -1 ? parseFloat(e) / 100 * b : parseFloat(e), d > e ? [e, d] : [d, e] } function d(c) { if (!c) return 0; c = b(c); var d, e, f, g, h, j, k, l = c.tagName.toLowerCase(), m = 1, n = 1; c.getAttribute('vector-effect') === 'non-scaling-stroke' && (n = c.getScreenCTM(), m = n.a, n = n.d); try { e = c.getBBox() } catch (o) {} if (e && (e.width || e.height) || l !== 'rect' && l !== 'circle' && l !== 'ellipse' || (e = {width: parseFloat(c.getAttribute(l === 'rect' ? 'width' : l === 'circle' ? 'r' : 'rx')), height: parseFloat(c.getAttribute(l === 'rect' ? 'height' : l === 'circle' ? 'r' : 'ry'))}, l !== 'rect' && (e.width *= 2, e.height *= 2)), l === 'path')g = c.style.strokeDasharray, c.style.strokeDasharray = 'none', d = c.getTotalLength() || 0, m !== n && console.log("Warning: <path> length cannot be measured accurately when vector-effect is non-scaling-stroke and the element isn't proportionally scaled."), d *= (m + n) / 2, c.style.strokeDasharray = g; else if (l === 'rect')d = 2 * e.width * m + 2 * e.height * n; else if (l === 'line')d = a(c.getAttribute('x1'), c.getAttribute('y1'), c.getAttribute('x2'), c.getAttribute('y2'), m, n); else if (l === 'polyline' || l === 'polygon') for (f = c.getAttribute('points').match(i) || [], l === 'polygon' && f.push(f[0], f[1]), d = 0, h = 2; h < f.length; h += 2)d += a(f[h - 2], f[h - 1], f[h], f[h + 1], m, n) || 0; else (l === 'circle' || l === 'ellipse') && (j = e.width / 2 * m, k = e.height / 2 * n, d = Math.PI * (3 * (j + k) - Math.sqrt((3 * j + k) * (j + 3 * k)))); return d || 0 } function e(a, c) { if (!a) return [0, 0]; a = b(a), c = c || d(a) + 1; var e = h(a), f = e.strokeDasharray || '', g = parseFloat(e.strokeDashoffset), i = f.indexOf(','); return i < 0 && (i = f.indexOf(' ')), f = i < 0 ? c : parseFloat(f.substr(0, i)) || 1e-5, f > c && (f = c), [Math.max(0, -g), Math.max(0, f - g)] } var f, g = _gsScope.document, h = g.defaultView ? g.defaultView.getComputedStyle : function() {}, i = /(?:(-|-=|\+=)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi, j = ((_gsScope.navigator || {}).userAgent || '').indexOf('Edge') !== -1; f = _gsScope._gsDefine.plugin({propName: 'drawSVG', API: 2, version: '0.1.3', global: !0, overwriteProps: ['drawSVG'], init: function(a, b, f, g) { if (!a.getBBox) return !1; var i, k, l, m, n = d(a) + 1; return this._style = a.style, typeof b === 'function' && (b = b(g, a)), b === !0 || b === 'true' ? b = '0 100%' : b ? (b + '').indexOf(' ') === -1 && (b = '0 ' + b) : b = '0 0', i = e(a, n), k = c(b, n, i[0]), this._length = n + 10, i[0] === 0 && k[0] === 0 ? (l = Math.max(1e-5, k[1] - n), this._dash = n + l, this._offset = n - i[1] + l, this._addTween(this, '_offset', this._offset, n - k[1] + l, 'drawSVG')) : (this._dash = i[1] - i[0] || 1e-6, this._offset = -i[0], this._addTween(this, '_dash', this._dash, k[1] - k[0] || 1e-5, 'drawSVG'), this._addTween(this, '_offset', this._offset, -k[0], 'drawSVG')), j && (m = h(a), k = m.strokeLinecap, k !== 'butt' && k !== m.strokeLinejoin && (k = parseFloat(m.strokeMiterlimit), this._addTween(a.style, 'strokeMiterlimit', k, k + 1e-4, 'strokeMiterlimit'))), !0 }, set: function(a) { this._firstPT && (this._super.setRatio.call(this, a), this._style.strokeDashoffset = this._offset, a === 1 || a === 0 ? this._style.strokeDasharray = this._offset < 0.001 && this._length - this._dash <= 10 ? 'none' : this._offset === this._dash ? '0px, 999999px' : this._dash + 'px,' + this._length + 'px' : this._style.strokeDasharray = this._dash + 'px,' + this._length + 'px') }}), f.getLength = d, f.getPosition = e }), _gsScope._gsDefine && _gsScope._gsQueue.pop()(), (function(a) { 'use strict'; var b = function() { return (_gsScope.GreenSockGlobals || _gsScope)[a] }; typeof define === 'function' && define.amd ? define(['TweenLite'], b) : typeof module !== 'undefined' && module.exports && (require('../TweenLite.js'), module.exports = b()) }('DrawSVGPlugin'))
